name: Release and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.1)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8
    
    - name: Run linting
      run: |
        black --check src/ examples/ tests/
        flake8 src/ examples/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  create-release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version from tag
      id: extract_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_version.outputs.version }}
        release_name: CHAOS Framework ${{ steps.extract_version.outputs.version }}
        body: |
          ## What's Changed
          
          ### Features
          - Agentic AI training data generation
          - Progressive difficulty levels from simple to chaotic
          - PEFT-ready Alpaca format output
          - Gemini AI integration for enhanced variety
          - CLI tool for easy generation
          
          ### Installation
          ```bash
          pip install chaos-framework
          ```
          
          ### Quick Start
          ```bash
          # Generate sample scenarios
          chaos-generate generate --count 10 --output my_scenarios.json
          
          # Generate balanced curriculum
          chaos-generate curriculum --count-per-level 25
          ```
          
          See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for full documentation.
        draft: false
        prerelease: false

  publish-to-pypi:
    needs: [build, create-release]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/chaos-framework
    permissions:
      id-token: write
    
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1